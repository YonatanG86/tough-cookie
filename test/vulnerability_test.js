"use strict";

const vows = require("vows");
const assert = require("assert");
const tough = require("../lib/cookie");
const CookieJar = tough.CookieJar;

vows
  .describe("Prototype Pollution Vulnerability")
  .addBatch({
    "When setting a cookie with a malicious domain": {
      topic: function () {
        const cookieJar = new CookieJar(undefined, {
          rejectPublicSuffixes: false,
        });

        const maliciousCookie = {
          key: "__proto__",
          value: "polluted",
        };

        try {
          cookieJar.setCookieSync(
            `${maliciousCookie.key}=${maliciousCookie.value}; Domain=__proto__; Path=/;`,
            "https://__proto__/admin"
          );
          cookieJar.setCookieSync(
            "Auth=Token; Domain=google.com; Path=/testpath",
            "https://google.com/"
          );

          process.nextTick(() => this.callback(null, {}["/"]));
        } catch (err) {
          this.callback(null, undefined);
        }
      },
      "we should see no pollution": function (topic) {
        assert.equal(
          topic,
          undefined,
          "Prototype pollution vulnerability triggered"
        );
      },
      "results in a cookie that is not affected by the attempted prototype pollution":
        function () {
          const obj = {};
          assert(obj["/testpath"] === undefined);
        },
    },
    "Issue #282 - Prototype pollution - V2.5.0 Patch": {
      "when setting a cookie with the domain __proto__ and path keys": {
        topic: function () {
          const cookieJar = new CookieJar(undefined, {
            rejectPublicSuffixes: false,
          });
          const originalKeysFunction = Object.keys;

          try {
            cookieJar.setCookieSync(
              "TestCookie=polluted; Domain=__proto__; Path=keys",
              "https://__proto__/admin"
            );
          } catch (err) {}

          return originalKeysFunction;
        },
        "results in Object.keys() is not affected by the attempted prototype pollution":
          function (originalKeysFunction) {
            assert.strictEqual(originalKeysFunction, Object.keys);
          },
      },
      "when setting a cookie with the domain __proto__ and path __defineGetter__":
        {
          topic: function () {
            const cookieJar = new CookieJar(undefined, {
              rejectPublicSuffixes: false,
            });

            try {
              cookieJar.setCookieSync(
                "TestCookie=polluted; Domain=__proto__; Path=__defineGetter__",
                "https://__proto__/admin"
              );
            } catch (err) {}

            process.nextTick(this.callback);
          },
          "results in Object.__defineGetter__() is not affected by the attempted prototype pollution":
            function () {
              const obj = { foo: "bar" };
              assert(obj.foo === "bar");
            },
        },
    },
  })
  .export(module);
